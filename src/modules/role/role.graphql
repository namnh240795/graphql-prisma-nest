type Role {
  name: String
  id: Int
}

input CreateRoleInput {
  name: String!
}

input UpdateRoleInput {
  id: Int!
  name: String!
}

input RolesInput {
  id: Int
  name: String
  skip: Int
  take: Int
}

type RolesOutput {
  skip: Int!
  take: Int!
  total: Int!
  data: [Role]
}

type Query {
  role(id: Int!): Role!
  roles(input: RolesInput!): RolesOutput!
}

type Mutation {
  createRole(createRoleInput: CreateRoleInput!): Role!
  updateRole(updateRoleInput: UpdateRoleInput!): Role!
  removeRole(id: Int!): Role
}
